generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  userName        String   @unique
  email           String   @unique
  password        String
  phone           String?
  dateOfBirth     DateTime
  role            UserRole @default(USER)
  points          Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organizedGames Game[]
  participations Participation[]
  notifications  Notification[]
  reviewsGiven    Review[]      @relation("WrittenReviews")
  reviewsReceived Review[]      @relation("ReceivedReviews")
  avatar          Avatar?  @relation("UserAvatar")
  ownedItems      OwnedItem[]
}

model Sport {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  games       Game[]
}

model Game {
  id              String   @id @default(uuid())
  title           String
  description     String?
  date            DateTime
  duration        Int?
  location        String
  latitude        Float
  longitude       Float
  maxPlayers      Int
  currentPlayers  Int @default(0)
  status          GameStatus @default(SCHEDULED)
  sportId         String
  sport           Sport @relation(fields: [sportId], references: [id])
  organizerId     String
  organizer       User @relation(fields: [organizerId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  participations Participation[]
  notifications  Notification[]
  reviews        Review[]
}

model Participation {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  status    ParticipationStatus @default(PENDING)
  joinedAt  DateTime @default(now())

  @@unique([userId, gameId])
}

model Notification {
  id        String @id @default(uuid())
  type      NotificationType
  message   String
  read      Boolean @default(false)
  user      User @relation(fields: [userId], references: [id])
  userId    String
  game      Game @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())
}

model Review {
  id                   String @id @default(uuid())
  skillRating          Int
  sportsmanshipRating  Int
  comment              String?
  reviewer             User @relation("WrittenReviews", fields: [reviewerId], references: [id])
  reviewerId           String
  reviewee             User     @relation("ReceivedReviews", fields: [revieweeId], references: [id])
  revieweeId           String
  game                 Game     @relation(fields: [gameId], references: [id])
  gameId               String
  createdAt            DateTime @default(now())

  @@unique([reviewerId, revieweeId, gameId])
}

model Avatar {
  id          String @id @default(uuid())
  skinColor   AvatarSkinColor
  gender      AvatarGender
  userId      String  @unique
  user        User    @relation("UserAvatar", fields: [userId], references: [id])

  items       Item[]  @relation("AvatarItems")
}

model Item {
  id          String @id @default(uuid())
  name        String
  description String?
  type        ItemType
  price       Int
  imageUrl    String

  avatars     Avatar[] @relation("AvatarItems")
  ownedBy     OwnedItem[]
}

model OwnedItem {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  item         Item     @relation(fields: [itemId], references: [id])
  itemId       String
  purchasedAt  DateTime @default(now())
}

enum NotificationType {
  GAME_UPDATE
  PARTICIPATION_ACCEPTED
  PARTICIPATION_REJECTED
}

enum ParticipationStatus {
  PENDING
  CONFIRMED
  REJECTED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AvatarSkinColor {
  WHITE
  TAN
  BROWN
  DARK
  BLACK
}

enum AvatarGender {
  MALE
  FEMALE
}

enum ItemType {
  HEAD
  SHIRT
  PANTS
  SHOES
  EXTRA
}